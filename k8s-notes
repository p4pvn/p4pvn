Kubernetes Architecture:

                       Cloud     <---------------- End
                       DataCenter                  User
                      (DNS: domain to public IP)
                           |
                           |
                      load balancer (external)
                           |
                        Node 1
                           |
                     Ingress Controller
                     /               
                    /                 
               Service             (Public to Pvt IP)              1. ClusterIP
                  |              acts as a Load Balancer           2. NodePort
                  |                                                3. LoadBalancer      4. External Name
              Deployment      (Provides Rolling Updates)           1. Rolling Deployment
                  |                                                2. Recreate
                  |                                                3. Canary Deployment (blue/green deployment)
              Replica Set        (Multiple Namespaces)             1. Replica Controller
              /          \        Used to create pods              2. Replica Set
             /            \                                        3. Deployment
        Pods               Pods         (Same IP as container)
 (Pause & C1)         (Pause & C1)      (Stores namespace and IP)         
          |                  |
          |                  |
     Persistent          Persistent                                1. ReadWriteMany
    Volume claim        Volume Claim                               2. ReadOnlyMany
          |                |                                       3. ReadWriteOnce
          |                |
 __________________________________________
|               Persistent                 |                       1. Recycle
|               Volume (PV)                |                       2. Retain
 __________________________________________


2. Config of K8 Cluster:
    1. KubeAdm (Automated and not customized) / Kubeless
    2. File Method Config.
    3. PAAS Services (AKS, EKS, GKE) or openshift (Docker + Kubernetes)

Connecting to k8s cluster:
Pre-requisites: kubectl installed, aws (access, secret key)
1. Make an entry in "C:\Users\pqz\.ssh\config" with appropriate IP and domain pvt keys and user.
2. open cmd: ssh -D 8081 -N qad-bastion-sand
3. open cmd: set aws variables from aws resource manager.
4. aws eks update-kubeconfig --name microservices-sandbox --region us-east-2
   kubectl config use-context arn:aws:eks:us-east-2:891377266553:cluster/microservices-sandbox
5. set HTTPS_PROXY=socks5://localhost:8081
6. kubectl get deployments -n sandbox
   you're now connected to k8s cluster.


3. More About KubeAdm:
   1. Run 'KubeAdm init' (master node) so you will get token and CA public key. (you can customized CA Public key).
   2. Once node gets token & CA Public key (through KubeAdm join link), it will be added as worker node.
   3. if Token & CA public key gets compromised, you will have to turn off auto-approval to master node.
   4. you can add worker node without CA public key as well, but it will put some limitations.

Commands of Kubernetes:
1. PODS:
    kubectl apply -f <pod-definition.yaml>           -create pods from yml file.
    kubectl get pods -n <namespace>
    kubectl describe pod <pod-name>
    kubectl exec -it <pod-name> -- /bin/sh
    kubectl cp <pod-name>:<source-path> <destination-path>
    kubectl logs <pod-name>
    kubectl get pods -o wide                         -get pod status and IP
    
2. REPLICA SETS:
    kubectl get rs
    kubectl describe rs <replica-set-name>

3. DEPLOYMENTS:
    kubectl create deployment <deployment-name> --image=<image-name>
    kubectl set image deployment/<deployment-name> <container-name>=<new-image>
    kubectl rollout undo deployment/<deployment-name>
    kubectl rollout pause deployment/<deployment-name>
    kubectl rollout resume deployment/<deployment-name>

4. SERVICES:
    kubectl create -f <service-definition.yaml>  
    kubectl expose deployment <deployment-name> --port=<port> --target-port=<target-port> --type=<service-type>
    kubectl get services
    kubectl delete service <service-name>

5. INGRESS CONTROLLER:
    kubectl create -f <ingress-definition.yaml>
    kubectl get ingress
    kubectl describe ingress <ingress-name>

6. OTHERS:
    kubectl get deployment, rs, pod
    watch kubectl get all -o wide     -complete observation of IP, Port of pod, deployment, services and other components of cluster.
    # add -n for namespaces
    #     -c for containername
    #     -u for username
    #     -p for port number

7. Jobs, cronjobs [Batch Jobs]:
kubectl get jobs,cj -n sandbox

# Manually trigger or create jobs from existing cronjob:
kubectl -n sandbox create job --from cronjob.batch/batch-jobs-opensearch-remove-old-messages manual-batch-jobs-opensearch-remove-old-messages

#container logs of previous pod:
kubectl logs <pod-name> --previous

#you can verbose the k8s command as well:

-v=6                     - basic request and response logs
-v=7                     - http request with response headers
-v=8                     - http request response with body
-v=9                     - maximum detail debug level
------------------------------ kubernetes architecture------------------------------------------
https://chatgpt.com/c/67c5dc26-9abc-8012-8236-00fa9ce3ab35
kubernetes architecture overview

API Server: Exposes the Kubernetes API, allowing users and controllers to interact with the cluster.

Scheduler: Assigns work (pods) to nodes based on resource requirements and constraints.

Controller: Monitors the cluster state and makes changes to achieve the desired state (e.g., ensuring the specified number of replicas).

Kubelet: Manages the state of individual nodes, ensuring containers are running in a pod.

Docker: A containerization platform used by Kubernetes to run and manage containers.

Kube Proxy: Maintains network rules on nodes, enabling communication between pods and external traffic.

etcd is a distributed key-value store that is used as the primary data store for Kubernetes. 


Add notes from this chat:
https://chatgpt.com/share/67e657fc-4598-8012-a530-b610d3f5e7d0

When you create a pod (kubectl apply -f pod.yaml), Kubernetes:
Sends the request to the API Server.
API Server writes pod data to etcd.
Scheduler and Controller Manager read from etcd.
Kubelet on the target node pulls the pod spec and starts the pod.



--------------------------------------------------------------- kubernetes QnA-------------------------------------------------------------------------

What do you know about federated clusters?

Federated clusters help manage multiple Kubernetes clusters, which means you can manage multiple Kubernetes clusters in one place. 
It provides a centralized view of all the clusters, making it easier to manage and scale applications across different clusters.

What is Heapster?
A Heapster is a cluster-wide aggregator of data that runs on each node. 
It is a Kubernetes project that provides a robust monitoring solution for Kubernetes clusters. 

What do you know about Headless service?
The Headless Service creates a service grouping that does not allocate an IP address or forward traffic.

Tell the process name that runs on the Kubernetes master node.

The process that runs on the Kubernetes master node is the Kube-apiserver.

DaemonSets:
The DaemonSets are pod sets that run on a host only one time on a host. And so, they are used attributes of host layers such as -network or network monitoring. 
DaemonSet enables you to run the Kubernetes pod on the cluster nodes that fulfill certain criteria or requirements. 
It ensures that some or all nodes run a copy of a pod. 
DaemonSets are used to deploy background services, run cluster storage, log collection, and deploy a node monitoring daemon on every node


StatefulSets are a type of workload API that manage stateful applications / keep session (mainly for DBs or )
They can also be used to manage the scaling and deployment of pod sets similar to deployments

Kubernetes Operators are software extensions that automate the management of complex applications on Kubernetes clusters.

The Sematext Docker Agent is a lightweight log collection agent that runs as a container on a Docker host

great notes for kubernetes ingress, where we need single ingress / multiple ingress and difference betn ingress and load balancer:
https://chatgpt.com/share/6846d79e-ea1c-8012-ba03-448ddc6ef8dd
